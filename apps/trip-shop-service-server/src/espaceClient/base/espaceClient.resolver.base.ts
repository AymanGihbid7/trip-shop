/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EspaceClient } from "./EspaceClient";
import { EspaceClientCountArgs } from "./EspaceClientCountArgs";
import { EspaceClientFindManyArgs } from "./EspaceClientFindManyArgs";
import { EspaceClientFindUniqueArgs } from "./EspaceClientFindUniqueArgs";
import { DeleteEspaceClientArgs } from "./DeleteEspaceClientArgs";
import { EspaceClientService } from "../espaceClient.service";
@graphql.Resolver(() => EspaceClient)
export class EspaceClientResolverBase {
  constructor(protected readonly service: EspaceClientService) {}

  async _espaceClientsMeta(
    @graphql.Args() args: EspaceClientCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EspaceClient])
  async espaceClients(
    @graphql.Args() args: EspaceClientFindManyArgs
  ): Promise<EspaceClient[]> {
    return this.service.espaceClients(args);
  }

  @graphql.Query(() => EspaceClient, { nullable: true })
  async espaceClient(
    @graphql.Args() args: EspaceClientFindUniqueArgs
  ): Promise<EspaceClient | null> {
    const result = await this.service.espaceClient(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EspaceClient)
  async deleteEspaceClient(
    @graphql.Args() args: DeleteEspaceClientArgs
  ): Promise<EspaceClient | null> {
    try {
      return await this.service.deleteEspaceClient(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
