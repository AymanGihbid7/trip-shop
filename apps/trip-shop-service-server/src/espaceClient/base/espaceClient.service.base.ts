/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EspaceClient as PrismaEspaceClient } from "@prisma/client";

export class EspaceClientServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EspaceClientCountArgs, "select">
  ): Promise<number> {
    return this.prisma.espaceClient.count(args);
  }

  async espaceClients<T extends Prisma.EspaceClientFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EspaceClientFindManyArgs>
  ): Promise<PrismaEspaceClient[]> {
    return this.prisma.espaceClient.findMany<Prisma.EspaceClientFindManyArgs>(
      args
    );
  }
  async espaceClient<T extends Prisma.EspaceClientFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EspaceClientFindUniqueArgs>
  ): Promise<PrismaEspaceClient | null> {
    return this.prisma.espaceClient.findUnique(args);
  }
  async createEspaceClient<T extends Prisma.EspaceClientCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EspaceClientCreateArgs>
  ): Promise<PrismaEspaceClient> {
    return this.prisma.espaceClient.create<T>(args);
  }
  async updateEspaceClient<T extends Prisma.EspaceClientUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EspaceClientUpdateArgs>
  ): Promise<PrismaEspaceClient> {
    return this.prisma.espaceClient.update<T>(args);
  }
  async deleteEspaceClient<T extends Prisma.EspaceClientDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EspaceClientDeleteArgs>
  ): Promise<PrismaEspaceClient> {
    return this.prisma.espaceClient.delete(args);
  }
}
