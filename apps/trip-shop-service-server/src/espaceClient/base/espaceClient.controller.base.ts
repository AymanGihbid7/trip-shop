/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EspaceClientService } from "../espaceClient.service";
import { EspaceClientCreateInput } from "./EspaceClientCreateInput";
import { EspaceClient } from "./EspaceClient";
import { EspaceClientFindManyArgs } from "./EspaceClientFindManyArgs";
import { EspaceClientWhereUniqueInput } from "./EspaceClientWhereUniqueInput";
import { EspaceClientUpdateInput } from "./EspaceClientUpdateInput";

export class EspaceClientControllerBase {
  constructor(protected readonly service: EspaceClientService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EspaceClient })
  async createEspaceClient(
    @common.Body() data: EspaceClientCreateInput
  ): Promise<EspaceClient> {
    return await this.service.createEspaceClient({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EspaceClient] })
  @ApiNestedQuery(EspaceClientFindManyArgs)
  async espaceClients(@common.Req() request: Request): Promise<EspaceClient[]> {
    const args = plainToClass(EspaceClientFindManyArgs, request.query);
    return this.service.espaceClients({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EspaceClient })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async espaceClient(
    @common.Param() params: EspaceClientWhereUniqueInput
  ): Promise<EspaceClient | null> {
    const result = await this.service.espaceClient({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EspaceClient })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEspaceClient(
    @common.Param() params: EspaceClientWhereUniqueInput,
    @common.Body() data: EspaceClientUpdateInput
  ): Promise<EspaceClient | null> {
    try {
      return await this.service.updateEspaceClient({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EspaceClient })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEspaceClient(
    @common.Param() params: EspaceClientWhereUniqueInput
  ): Promise<EspaceClient | null> {
    try {
      return await this.service.deleteEspaceClient({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
