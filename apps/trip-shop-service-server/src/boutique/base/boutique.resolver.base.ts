/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Boutique } from "./Boutique";
import { BoutiqueCountArgs } from "./BoutiqueCountArgs";
import { BoutiqueFindManyArgs } from "./BoutiqueFindManyArgs";
import { BoutiqueFindUniqueArgs } from "./BoutiqueFindUniqueArgs";
import { DeleteBoutiqueArgs } from "./DeleteBoutiqueArgs";
import { BoutiqueService } from "../boutique.service";
@graphql.Resolver(() => Boutique)
export class BoutiqueResolverBase {
  constructor(protected readonly service: BoutiqueService) {}

  async _boutiquesMeta(
    @graphql.Args() args: BoutiqueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Boutique])
  async boutiques(
    @graphql.Args() args: BoutiqueFindManyArgs
  ): Promise<Boutique[]> {
    return this.service.boutiques(args);
  }

  @graphql.Query(() => Boutique, { nullable: true })
  async boutique(
    @graphql.Args() args: BoutiqueFindUniqueArgs
  ): Promise<Boutique | null> {
    const result = await this.service.boutique(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Boutique)
  async deleteBoutique(
    @graphql.Args() args: DeleteBoutiqueArgs
  ): Promise<Boutique | null> {
    try {
      return await this.service.deleteBoutique(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
