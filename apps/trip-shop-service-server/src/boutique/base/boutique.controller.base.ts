/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BoutiqueService } from "../boutique.service";
import { BoutiqueCreateInput } from "./BoutiqueCreateInput";
import { Boutique } from "./Boutique";
import { BoutiqueFindManyArgs } from "./BoutiqueFindManyArgs";
import { BoutiqueWhereUniqueInput } from "./BoutiqueWhereUniqueInput";
import { BoutiqueUpdateInput } from "./BoutiqueUpdateInput";

export class BoutiqueControllerBase {
  constructor(protected readonly service: BoutiqueService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Boutique })
  async createBoutique(
    @common.Body() data: BoutiqueCreateInput
  ): Promise<Boutique> {
    return await this.service.createBoutique({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Boutique] })
  @ApiNestedQuery(BoutiqueFindManyArgs)
  async boutiques(@common.Req() request: Request): Promise<Boutique[]> {
    const args = plainToClass(BoutiqueFindManyArgs, request.query);
    return this.service.boutiques({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Boutique })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async boutique(
    @common.Param() params: BoutiqueWhereUniqueInput
  ): Promise<Boutique | null> {
    const result = await this.service.boutique({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Boutique })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBoutique(
    @common.Param() params: BoutiqueWhereUniqueInput,
    @common.Body() data: BoutiqueUpdateInput
  ): Promise<Boutique | null> {
    try {
      return await this.service.updateBoutique({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Boutique })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBoutique(
    @common.Param() params: BoutiqueWhereUniqueInput
  ): Promise<Boutique | null> {
    try {
      return await this.service.deleteBoutique({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
