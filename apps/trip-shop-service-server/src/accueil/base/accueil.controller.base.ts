/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AccueilService } from "../accueil.service";
import { AccueilCreateInput } from "./AccueilCreateInput";
import { Accueil } from "./Accueil";
import { AccueilFindManyArgs } from "./AccueilFindManyArgs";
import { AccueilWhereUniqueInput } from "./AccueilWhereUniqueInput";
import { AccueilUpdateInput } from "./AccueilUpdateInput";

export class AccueilControllerBase {
  constructor(protected readonly service: AccueilService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Accueil })
  async createAccueil(
    @common.Body() data: AccueilCreateInput
  ): Promise<Accueil> {
    return await this.service.createAccueil({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Accueil] })
  @ApiNestedQuery(AccueilFindManyArgs)
  async accueils(@common.Req() request: Request): Promise<Accueil[]> {
    const args = plainToClass(AccueilFindManyArgs, request.query);
    return this.service.accueils({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Accueil })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async accueil(
    @common.Param() params: AccueilWhereUniqueInput
  ): Promise<Accueil | null> {
    const result = await this.service.accueil({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Accueil })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAccueil(
    @common.Param() params: AccueilWhereUniqueInput,
    @common.Body() data: AccueilUpdateInput
  ): Promise<Accueil | null> {
    try {
      return await this.service.updateAccueil({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Accueil })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAccueil(
    @common.Param() params: AccueilWhereUniqueInput
  ): Promise<Accueil | null> {
    try {
      return await this.service.deleteAccueil({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
