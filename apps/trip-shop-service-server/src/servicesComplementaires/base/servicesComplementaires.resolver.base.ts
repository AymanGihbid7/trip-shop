/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ServicesComplementaires } from "./ServicesComplementaires";
import { ServicesComplementairesCountArgs } from "./ServicesComplementairesCountArgs";
import { ServicesComplementairesFindManyArgs } from "./ServicesComplementairesFindManyArgs";
import { ServicesComplementairesFindUniqueArgs } from "./ServicesComplementairesFindUniqueArgs";
import { DeleteServicesComplementairesArgs } from "./DeleteServicesComplementairesArgs";
import { ServicesComplementairesService } from "../servicesComplementaires.service";
@graphql.Resolver(() => ServicesComplementaires)
export class ServicesComplementairesResolverBase {
  constructor(protected readonly service: ServicesComplementairesService) {}

  async _servicesComplementairesItemsMeta(
    @graphql.Args() args: ServicesComplementairesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ServicesComplementaires])
  async servicesComplementairesItems(
    @graphql.Args() args: ServicesComplementairesFindManyArgs
  ): Promise<ServicesComplementaires[]> {
    return this.service.servicesComplementairesItems(args);
  }

  @graphql.Query(() => ServicesComplementaires, { nullable: true })
  async servicesComplementaires(
    @graphql.Args() args: ServicesComplementairesFindUniqueArgs
  ): Promise<ServicesComplementaires | null> {
    const result = await this.service.servicesComplementaires(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ServicesComplementaires)
  async deleteServicesComplementaires(
    @graphql.Args() args: DeleteServicesComplementairesArgs
  ): Promise<ServicesComplementaires | null> {
    try {
      return await this.service.deleteServicesComplementaires(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
