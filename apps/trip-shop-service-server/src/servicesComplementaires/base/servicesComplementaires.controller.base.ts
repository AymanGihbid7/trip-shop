/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServicesComplementairesService } from "../servicesComplementaires.service";
import { ServicesComplementairesCreateInput } from "./ServicesComplementairesCreateInput";
import { ServicesComplementaires } from "./ServicesComplementaires";
import { ServicesComplementairesFindManyArgs } from "./ServicesComplementairesFindManyArgs";
import { ServicesComplementairesWhereUniqueInput } from "./ServicesComplementairesWhereUniqueInput";
import { ServicesComplementairesUpdateInput } from "./ServicesComplementairesUpdateInput";

export class ServicesComplementairesControllerBase {
  constructor(protected readonly service: ServicesComplementairesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServicesComplementaires })
  async createServicesComplementaires(
    @common.Body() data: ServicesComplementairesCreateInput
  ): Promise<ServicesComplementaires> {
    return await this.service.createServicesComplementaires({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ServicesComplementaires] })
  @ApiNestedQuery(ServicesComplementairesFindManyArgs)
  async servicesComplementairesItems(
    @common.Req() request: Request
  ): Promise<ServicesComplementaires[]> {
    const args = plainToClass(
      ServicesComplementairesFindManyArgs,
      request.query
    );
    return this.service.servicesComplementairesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServicesComplementaires })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async servicesComplementaires(
    @common.Param() params: ServicesComplementairesWhereUniqueInput
  ): Promise<ServicesComplementaires | null> {
    const result = await this.service.servicesComplementaires({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServicesComplementaires })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServicesComplementaires(
    @common.Param() params: ServicesComplementairesWhereUniqueInput,
    @common.Body() data: ServicesComplementairesUpdateInput
  ): Promise<ServicesComplementaires | null> {
    try {
      return await this.service.updateServicesComplementaires({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServicesComplementaires })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServicesComplementaires(
    @common.Param() params: ServicesComplementairesWhereUniqueInput
  ): Promise<ServicesComplementaires | null> {
    try {
      return await this.service.deleteServicesComplementaires({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
