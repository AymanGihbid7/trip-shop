/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ServicesComplementaires as PrismaServicesComplementaires,
} from "@prisma/client";

export class ServicesComplementairesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServicesComplementairesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.servicesComplementaires.count(args);
  }

  async servicesComplementairesItems<
    T extends Prisma.ServicesComplementairesFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ServicesComplementairesFindManyArgs>
  ): Promise<PrismaServicesComplementaires[]> {
    return this.prisma.servicesComplementaires.findMany<Prisma.ServicesComplementairesFindManyArgs>(
      args
    );
  }
  async servicesComplementaires<
    T extends Prisma.ServicesComplementairesFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ServicesComplementairesFindUniqueArgs>
  ): Promise<PrismaServicesComplementaires | null> {
    return this.prisma.servicesComplementaires.findUnique(args);
  }
  async createServicesComplementaires<
    T extends Prisma.ServicesComplementairesCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ServicesComplementairesCreateArgs>
  ): Promise<PrismaServicesComplementaires> {
    return this.prisma.servicesComplementaires.create<T>(args);
  }
  async updateServicesComplementaires<
    T extends Prisma.ServicesComplementairesUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ServicesComplementairesUpdateArgs>
  ): Promise<PrismaServicesComplementaires> {
    return this.prisma.servicesComplementaires.update<T>(args);
  }
  async deleteServicesComplementaires<
    T extends Prisma.ServicesComplementairesDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ServicesComplementairesDeleteArgs>
  ): Promise<PrismaServicesComplementaires> {
    return this.prisma.servicesComplementaires.delete(args);
  }
}
