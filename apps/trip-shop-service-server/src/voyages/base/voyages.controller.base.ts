/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VoyagesService } from "../voyages.service";
import { VoyagesCreateInput } from "./VoyagesCreateInput";
import { Voyages } from "./Voyages";
import { VoyagesFindManyArgs } from "./VoyagesFindManyArgs";
import { VoyagesWhereUniqueInput } from "./VoyagesWhereUniqueInput";
import { VoyagesUpdateInput } from "./VoyagesUpdateInput";

export class VoyagesControllerBase {
  constructor(protected readonly service: VoyagesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Voyages })
  async createVoyages(
    @common.Body() data: VoyagesCreateInput
  ): Promise<Voyages> {
    return await this.service.createVoyages({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Voyages] })
  @ApiNestedQuery(VoyagesFindManyArgs)
  async voyagesItems(@common.Req() request: Request): Promise<Voyages[]> {
    const args = plainToClass(VoyagesFindManyArgs, request.query);
    return this.service.voyagesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Voyages })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async voyages(
    @common.Param() params: VoyagesWhereUniqueInput
  ): Promise<Voyages | null> {
    const result = await this.service.voyages({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Voyages })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVoyages(
    @common.Param() params: VoyagesWhereUniqueInput,
    @common.Body() data: VoyagesUpdateInput
  ): Promise<Voyages | null> {
    try {
      return await this.service.updateVoyages({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Voyages })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVoyages(
    @common.Param() params: VoyagesWhereUniqueInput
  ): Promise<Voyages | null> {
    try {
      return await this.service.deleteVoyages({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
