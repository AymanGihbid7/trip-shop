/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Voyages as PrismaVoyages } from "@prisma/client";

export class VoyagesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VoyagesCountArgs, "select">): Promise<number> {
    return this.prisma.voyages.count(args);
  }

  async voyagesItems<T extends Prisma.VoyagesFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.VoyagesFindManyArgs>
  ): Promise<PrismaVoyages[]> {
    return this.prisma.voyages.findMany<Prisma.VoyagesFindManyArgs>(args);
  }
  async voyages<T extends Prisma.VoyagesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VoyagesFindUniqueArgs>
  ): Promise<PrismaVoyages | null> {
    return this.prisma.voyages.findUnique(args);
  }
  async createVoyages<T extends Prisma.VoyagesCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VoyagesCreateArgs>
  ): Promise<PrismaVoyages> {
    return this.prisma.voyages.create<T>(args);
  }
  async updateVoyages<T extends Prisma.VoyagesUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VoyagesUpdateArgs>
  ): Promise<PrismaVoyages> {
    return this.prisma.voyages.update<T>(args);
  }
  async deleteVoyages<T extends Prisma.VoyagesDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.VoyagesDeleteArgs>
  ): Promise<PrismaVoyages> {
    return this.prisma.voyages.delete(args);
  }
}
